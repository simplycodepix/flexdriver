generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ScheduleDays {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String             @id @default(cuid())
    name            String?
    email           String             @unique
    emailVerified   DateTime?
    password        String
    image           String?
    accounts        Account[]
    sessions        Session[]
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt
    stationFilters  StationFilter[]
    scheduledBlocks ScheduledBlock[]
    notifications   NotificationItem[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StationFilter {
    id                 String         @id @default(cuid())
    active             Boolean        @default(false)
    name               String
    minPricePerBlock   Int?
    minHours           Int?
    maxHours           Int?
    timeNeededToArrive Int?
    hourlyRate         Int?
    dateFrom           DateTime?
    dateTo             DateTime?
    stations           String[]
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt
    daysOfWeek         ScheduleDays[]
    userId             String
    user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)

    scheduledBlocks ScheduledBlock[]

    @@unique([userId, name])
}

model ScheduledBlock {
    id              String         @id @default(cuid())
    active          Boolean        @default(false)
    match           Boolean        @default(false)
    missed          Boolean        @default(false)
    dateFrom        DateTime?
    dateTo          DateTime?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    userId          String
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    stationFilterId String?
    stationFilter   StationFilter? @relation(fields: [stationFilterId], references: [id], onDelete: SetNull)
}

model NotificationItem {
    id        String   @id @default(cuid())
    type      String
    title     String
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
